Multithreading
---------------
- Allowed to work with multiple Thread
- Main Thread - 5
- GC - Daemon Thread

1 -10
1 - Min
10- Max
5 - Normal

Custom Thread - With Normal Priority

Ways to create a Thread  in Java
----------------------------------
java.lang

1. By extending Thread Class
2. By Implementing Runnable Interface

Synchronization
----------------
1. synchronized method
2. synchronized Block

Maven
------------
- Build Automation Tool
- Central to Local Repo
mvnRepository - Dependencies
POM= Project Object Mode;

Life Cycle Goals
-----------------
•	validate: check if all information necessary for the build is available
•	compile: compile the source code
•	test-compile: compile the test source code
•	test: run unit tests
•	package: package compiled source code into the distributable format (jar, war, …)
•	integration-test: process and deploy the package if needed to run integration tests
•	install: install the package to a local repository
•	deploy: copy the package to the remote repository

ProjectFolder:\> mvn build
mvn install 

ORM
----
Object Relational Mapping

- DBMS Table is created for writing operation automatically
- Queries are to be learnt & written
- Object to data is done manually
- Data to Object  is done manually
- Changing Database management SYSTEM is expensive


Entity - POJO which has a direct Linked table in the DB = Persistent Class

ID - Primary key of the table

JPA - Java Persistence API  - Specification(Annotations / methods)

Hibernate, TopLink - ORM implementers

Project Code >>> JPA >>> ORM(Hibernate)	>>> DB

JPA is ORM Implementer Independent

Data Source - Persistence Unit -  xml file

Persistence.xml - META-INF folder - Class Path (src folder)

EntityManagerFactory
EntityManager


Persistence Life Cycle
-----------------------
- States of Entities 

Impedence Mismatch in ORM 
----------------------------
Object World			Relational World

- Granularity Mismatch
- Identity
- Mapping Association
- Inheritance


BiDirectional Mapping
-------------------------
Owning Side
Inverse Side (must have a mappedBy property)

Many to Many - Any side can be Owning side- Customer(O) - Product(I)


